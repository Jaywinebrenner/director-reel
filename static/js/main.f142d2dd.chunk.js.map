{"version":3,"sources":["ResponsivePlayer.jsx","home.jsx","App.js","serviceWorker.js","index.js"],"names":["ResponsivePlayer","url","className","jsx","width","height","volume","playing","Home","loop","style","color","textDecoration","href","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAiCiBA,EA9BQ,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAE1B,OACE,yBAAKC,UAAU,kBACb,2BAAOC,KAAG,GAAV,+LAaE,kBAAC,IAAD,CACED,UAAU,eACVD,IAAKA,EACLG,MAAM,MACNC,OAAO,OACPC,OAAQ,IACRC,QAAQ,W,OCHHC,EAlBF,WAEX,OACE,yBAAKN,UAAU,OACb,+CACA,6CACA,6BACA,kBAAC,EAAD,CACED,IAAI,sFACJQ,KAAK,OACLF,QAAQ,SAEV,6BACA,0DAA+B,uBAAGG,MAAO,CAAEC,MAAO,UAAWC,eAAgB,QAAUC,KAAK,+CAA7D,YAA/B,OCJSC,MARf,WAGE,OACM,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAYR,KCEhBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,IAAD,KACE,kBAAC,EAAD,OACaC,SAASC,eAAe,SD0HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f142d2dd.chunk.js","sourcesContent":["import React from 'react';\nimport ReactPlayer from 'react-player';\n\nconst ResponsivePlayer = ({ url }) => {\n\n  return (\n    <div className='player-wrapper'>\n      <style jsx>{`\n          .player-wrapper {\ntext-align: center;\n          }\n\n          .react-player {\n            display: inline-block;\n            margin: 50px auto;\n          }\n\n          `}</style>\n\n\n        <ReactPlayer\n          className='react-player'\n          url={url}\n          width='80%'\n          height='100%'\n          volume= '1'\n          playing='true'\n          />\n      </div>\n    )\n  }\n\n\n  export default ResponsivePlayer\n","import React from 'react';\nimport './App.css';\nimport ResponsivePlayer from './ResponsivePlayer';\n\n\nconst Home = () => {\n\n  return(\n    <div className=\"App\">\n      <h1>Jay Winebrenner</h1>\n      <h3>Director Reel</h3>\n      <hr></hr>\n      <ResponsivePlayer\n        url='https://virtual-counselor-video.s3-us-west-2.amazonaws.com/Jay+Winebrenner+Reel.mp4'\n        loop='true'\n        playing='true'\n        />\n      <hr></hr>\n      <h5>jaywinebrenner@gmail.com | <a style={{ color: '#524f4a', textDecoration: 'none'}}  href=\"https://www.linkedin.com/in/jaywinebrenner/\">LinkedIn</a> </h5>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react';\nimport './App.css';\nimport ResponsivePlayer from './ResponsivePlayer';\nimport { Route } from 'react-router-dom';\nimport Home from './home.jsx';\n\nfunction App() {\n\n\n  return (\n        <Route path=\"/\" component={ Home } />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(<HashRouter>\n                  <App />\n                </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}